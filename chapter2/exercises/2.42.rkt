#lang racket

(require
    "2.40.rkt"
    rackunit)

(provide
    adjoin-position
    empty-board
    safe?)

; row
;   1 ░░▓▓░░▓▓
;   2 ▓▓░░▓▓░░
;   3 ░░▓▓░░▓▓
;   4 ▓▓░░▓▓░░
;      4 3 2 1 col

(define empty-board '())

(define (make-position row col)
    (cons row col))

(define (row-position position)
    (car position))

(define (col-position position)
    (cdr position))

(define (adjoin-position row col existing)
    (cons (make-position row col) existing))

(define (same-row? pos1 pos2)
    (= (row-position pos1) (row-position pos2)))

(define (same-col? pos1 pos2)
    (= (col-position pos1) (col-position pos2)))

(define (diagonal? pos1 pos2)
    (= (abs (- (col-position pos1) (col-position pos2)))
       (abs (- (row-position pos1) (row-position pos2)))))


(define (safe? try-pos positions)
    (define (can-place? queen-pos)
        (not (or (same-col? try-pos queen-pos)
                 (same-row? try-pos queen-pos)
                 (diagonal? try-pos queen-pos))))
    (or (null? positions)
        (and (can-place? (car positions))
             (safe? try-pos (cdr positions)))))


(check-true (safe? (make-position 1 1) empty-board))
(check-false
    (safe? (make-position 2 1)
           (list (make-position 1 1))))
(check-true
    (safe? (make-position 3 2)
           (list (make-position 1 1))))
(check-true
    (safe? (make-position 2 4)
           (list (make-position 1 1) (make-position 3 2))))


(define (queens board-size)
    (define (queens-cols k)
        (if (= k 0)
            (list empty-board)
            (filter
                (lambda (positions) (safe? (car positions) (cdr positions)))
                (flatmap
                    (lambda (rest-of-queens)
                        (map (lambda (proposed-row)
                                (adjoin-position proposed-row k rest-of-queens))
                             (enumerate-interval 1 board-size)))
                    (queens-cols (- k 1))))))
    (queens-cols board-size))

; This bit was generated by GitHub Copilot
(define (print-solutions list-of-queen-positions)
    (define (print-solution queen-positions)
        (define (print-row row)
            (define (print-col col)
                (if (member (make-position row col) queen-positions)
                    (display "QQ")
                    (if (even? (+ row col))
                        (display "░░")
                        (display "▓▓"))))
            (for-each print-col (enumerate-interval 1 (length queen-positions)))
            (newline))
        (for-each print-row (enumerate-interval 1 (length queen-positions)))
        (newline))
    (for-each print-solution list-of-queen-positions))

; (length (queens 4))
; ; 2
; (length (queens 5))
; ; 10
; (length (queens 6))
; ; 4
; (length (queens 8))
; ; 92
; (length (queens 10))
; ; 724

; (print-solutions (queens 6))
; ; ░░▓▓░░QQ░░▓▓
; ; QQ░░▓▓░░▓▓░░
; ; ░░▓▓░░▓▓QQ▓▓
; ; ▓▓QQ▓▓░░▓▓░░
; ; ░░▓▓░░▓▓░░QQ
; ; ▓▓░░QQ░░▓▓░░

; ; ░░▓▓░░▓▓QQ▓▓
; ; ▓▓░░QQ░░▓▓░░
; ; QQ▓▓░░▓▓░░▓▓
; ; ▓▓░░▓▓░░▓▓QQ
; ; ░░▓▓░░QQ░░▓▓
; ; ▓▓QQ▓▓░░▓▓░░

; ; ░░QQ░░▓▓░░▓▓
; ; ▓▓░░▓▓QQ▓▓░░
; ; ░░▓▓░░▓▓░░QQ
; ; QQ░░▓▓░░▓▓░░
; ; ░░▓▓QQ▓▓░░▓▓
; ; ▓▓░░▓▓░░QQ░░

; ; ░░▓▓QQ▓▓░░▓▓
; ; ▓▓░░▓▓░░▓▓QQ
; ; ░░QQ░░▓▓░░▓▓
; ; ▓▓░░▓▓░░QQ░░
; ; QQ▓▓░░▓▓░░▓▓
; ; ▓▓░░▓▓QQ▓▓░░
