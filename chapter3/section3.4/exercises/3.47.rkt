#lang racket

(define (build-list size fn)
  (if (= size 0)
    '()
    (cons (fn) (build-list (sub1 size) fn))))

(define (make-semaphore-mutexes n)
  (let ((mutex (make-mutex))
        (locked-n 0))
    (define (acquire)
      (if (< locked-n n)
        (begin
          (mutex 'acquire)
          (set! locked-n (add1 locked-n))
          (mutex 'release))
        (acquire)))
    (define (release)
      (mutex 'acquire)
      (set! locked-n (if (= locked-n 0) 0 (sub1 locked-n)))
      (mutex 'release))
    (define (dispach m)
      (cond ((eq? m 'acquire) (acquire))
            ((eq? m 'release) (release))
            (else (error "Wrong method SEMAPHORE:" m))))
    dispatch))

(define (test-and-set! cell)
  (if (car cell) true (begin (set-car! cell true) false)))

(define (with-lock success-callback retry-callback)
        (if (test-and-set! cell)
          (retry-callback)
          ;; lock acquired
          (success-callback)
          ;; release
          (set-mcar! cell false)

(define (make-semaphore-ts n)
  (let ((cell (list false))
        (locked-n 0))
    (define (acquire)
      (if (< locked-n n)
        (with-lock (lambda () (set! locked-n (add1 locked-n)))
                   acquire)
        (acquire)))
    (define (release)
      (with-lock (set! locked-n (if (= locked-n 0) 0 (sub1 locked-n)))
                 release))
    (define (dispach m)
      (cond ((eq? m 'acquire) (acquire))
            ((eq? m 'release) (release))
            (else (error "Wrong method SEMAPHORE:" m))))
    dispatch))
